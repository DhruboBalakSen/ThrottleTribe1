generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  name           String
  username       String        @unique
  email          String        @unique
  phoneNumber    String
  bio            String
  gender         String
  dob            String
  location       String
  profilePicture String?
  createdAt      DateTime      @default(now())
  blogComment    BlogComment[]
  blogLikes      BlogLikes[]
  blogs          Blogs[]
  comments       Comment[]
  following      Follow[]      @relation("Following")
  followers      Follow[]      @relation("FollowedBy")
  likes          Like[]
  posts          Post[]
  trips          Trips[]
  bookedTrips    BookedTrips[]
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    String
  content   String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [username])
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      String
  postId      Int
  commentText String
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [username])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [username])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [username])
  following   User     @relation("FollowedBy", fields: [followingId], references: [username])

  @@unique([followerId, followingId])
}

model Trips {
  id          Int           @id @default(autoincrement())
  title       String
  userId      String
  itinerary   String
  cost        String
  contact     String
  createdAt   DateTime      @default(now())
  source      String
  destination String
  imageUrl    String
  slots       Int
  tags        String[]
  start       DateTime
  end         DateTime
  user        User          @relation(fields: [userId], references: [username])
  bookedTrips BookedTrips[]
}

model Blogs {
  id        Int           @id @default(autoincrement())
  title     String
  author    String
  content   String
  createdAt DateTime      @default(now())
  tags      String[]
  imageUrl  String
  comments  BlogComment[]
  likes     BlogLikes[]
  user      User          @relation(fields: [author], references: [username])
}

model BlogLikes {
  id        Int      @id @default(autoincrement())
  userId    String
  blogId    Int
  createdAt DateTime @default(now())
  blog      Blogs    @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [username])
}

model BlogComment {
  id          Int      @id @default(autoincrement())
  userId      String
  blogId      Int
  commentText String
  createdAt   DateTime @default(now())
  blog        Blogs    @relation(fields: [blogId], references: [id])
  user        User     @relation(fields: [userId], references: [username])
}

model BookedTrips {
  id        Int      @id @default(autoincrement())
  userId    String
  tripId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [username])
  trips     Trips    @relation(fields: [tripId], references: [id])
}
