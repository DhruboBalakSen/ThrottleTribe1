// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  name           String
  username       String        @unique
  email          String        @unique
  phoneNumber    String
  bio            String
  gender         String
  dob            String
  location       String
  createdAt      DateTime      @default(now())
  profilePicture String?
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  trips          Trips[]
  blogs          Blogs[]
  blogLikes      BlogLikes[]
  blogComment    BlogComment[]

  followers Follow[] @relation("FollowedBy")
  following Follow[] @relation("Following")
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    String
  content   String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [username])
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      String
  postId      Int
  commentText String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [username])
  post        Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [username])
  post      Post     @relation(fields: [postId], references: [id])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [username])
  following User @relation("FollowedBy", fields: [followingId], references: [username])

  @@unique([followerId, followingId]) // Ensures a user cannot follow the same person twice
}

model Trips {
  id        Int    @id @default(autoincrement())
  userId    String
  itinerary String
  amenities String
  start     String
  end       String
  cost      String
  user      User   @relation(fields: [userId], references: [username])
}

model Blogs {
  id        Int           @id @default(autoincrement())
  title     String
  author    String
  content   String
  createdAt DateTime      @default(now())
  tags      String[]
  imageUrl  String
  likes     BlogLikes[]
  comments  BlogComment[]
  user      User          @relation(fields: [author], references: [username])
}

model BlogLikes {
  id        Int      @id @default(autoincrement())
  userId    String
  blogId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [username])
  blog      Blogs    @relation(fields: [blogId], references: [id])
}

model BlogComment {
  id          Int      @id @default(autoincrement())
  userId      String
  blogId      Int
  commentText String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [username])
  blog        Blogs    @relation(fields: [blogId], references: [id])
}
